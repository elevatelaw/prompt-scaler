# This is adapted from the `dbcrossbar` project, an open-source project
# copyright by Faraday, Inc and Eric Kidd, and licensed under the Apache-2.0
# OR MIT license. The original source code can be found at
# https://github.com/dbcrossbar/dbcrossbar/

name: CI

permissions:
  # Allow this workflow to make releases.
  contents: write

# Controls when the action will run. Triggers the workflow on push or pull
# request events but only for the main branch.
on:
  push:
    # Run on the main branch.
    branches:
      - main
      - ci
    tags:
      - "v*"
  pull_request:
    # Only run on pull requests against main.
    branches: [main]

jobs:
  # This only works on Linux, so we run it in separate 
  check_policy:
    name: "Check policy"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          # We track latest stable Rust instead of hardcoding it because it
          # virtually never breaks old code.
          toolchain: stable
      - name: Check policy
        uses: EmbarkStudios/cargo-deny-action@v2
        with:
          command: check
          arguments: --all-features

  # We run this job before building, to create any GitHub release that we might need.
  # Creating a release can only be done once, so we need to split it out from
  # other jobs.
  create_release:
    name: Create release (if needed)
    runs-on: ubuntu-latest
    outputs:
      release_version: ${{ steps.extract_release_version.outputs.release_version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Extract release version
        id: extract_release_version
        run: |
          release_version="$(echo '${{ github.ref }}' | sed 's,^.*/\([^/]*\)$,\1,; s,^v,,' )"
          echo Release version: $release_version
          echo "release_version=$release_version" >> "$GITHUB_OUTPUT"
      - name: Extract release body from CHANGELOG.md
        id: extract_release_body
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        # Use `clparse` to parse `CHANGELOG.md` and extract release notes.
        run: |
          curl -sLO https://github.com/marcaddeo/clparse/releases/download/0.8.0/clparse-0.8.0-x86_64-unknown-linux-musl.tar.gz
          tar xzf clparse*.tar.gz
          sudo cp clparse /usr/local/bin
          rm -rf clparse*
          clparse -f json CHANGELOG.md | \
            jq ".releases[] | select(.version == \"${{ steps.extract_release_version.outputs.release_version }}\") | { title: \"\", description: \"\", releases: [.] }" | \
            clparse - | \
            tail -n +3 > RELEASE_BODY.md
      - name: "Make release"
        id: create_release
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: "${{ steps.extract_release_version.outputs.release_version }}"
          body_path: RELEASE_BODY.md

  # We use a matrix to run our build on every supported platform.
  build:
    name: "Build"

    needs:
      - check_policy
      - create_release

    strategy:
      matrix:
        # target: Official name of system to compile for.
        # host: Official name of system doing the compiling.
        # cargo: Should we use regular cargo, or the cross wrapper for cross-compiling?
        # os: GitHub CI OS image to use on runner.
        include:
          - target: x86_64-unknown-linux-musl
            host: x86_64-unknown-linux-musl
            use-cross: true
            os: ubuntu-latest
            exe:
            features:
          # For AMD64 lambda functions, mostly.
          - target: aarch64-unknown-linux-musl
            host: x86_64-unknown-linux-musl
            use-cross: true
            os: ubuntu-latest
            exe:
            # libpostal does not build on AMD64.
            features: --no-default-features
          - target: aarch64-apple-darwin
            host: x86_64-apple-darwin
            use-cross: false
            os: macos-latest
            exe:
            features:
          - target: x86_64-pc-windows-msvc
            host: x86_64-pc-windows-msvc
            use-cross: false
            os: windows-latest
            exe: .exe
            features: --no-default-features

    runs-on: ${{ matrix.os }}

    steps:
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          # We track latest stable Rust instead of hardcoding it because it
          # virtually never breaks old code.
          toolchain: stable
          components: rustfmt, clippy
          target: ${{ matrix.target }}
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Check source formatting and warnings
        run: |
          cargo fmt -- --check
          cargo clippy ${{ matrix.features }} -- -D warnings
      - name: Test
        # Skip OCR tests for now, because they require CLI tools that aren't
        # available in the CI environment.
        run: |
          cargo test ${{ matrix.features }} -- --skip ocr
      - name: Build binaries
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }} ${{ matrix.features }}
          use-cross: ${{ matrix.use-cross }}
      # If we have a code-signing identity, we could use it like this.
      #
      # - name: Sign binaries (if needed)
      #   if: ${{ contains(matrix.target, 'apple') }}
      #   run: |
      #     codesign --force -s $YOUR_IDENTITY_HERE target/${{ matrix.target }}/release/prompt-scaler${{ matrix.exe }}
      - name: Choose release file name
        id: release_file_name
        shell: bash
        run: |
          release_file=prompt-scaler_${{ needs.create_release.outputs.release_version }}_${{ matrix.target }}.zip
          echo "release_file=$release_file" >> "$GITHUB_OUTPUT"
      - name: Build release
        id: build_release
        uses: vimtor/action-zip@v1.2
        with:
          files: "target/${{ matrix.target }}/release/prompt-scaler${{ matrix.exe }}"
          dest: ${{ steps.release_file_name.outputs.release_file }}
      - name: Upload Release Asset
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.release_file_name.outputs.release_file }}
          asset_name: ${{ steps.release_file_name.outputs.release_file }}
          asset_content_type: application/zip