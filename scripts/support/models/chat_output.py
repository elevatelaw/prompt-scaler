# generated by datamodel-codegen:
#   filename:  tmp_schema.json
#   timestamp: 2025-04-24T11:41:07+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, List, Optional

from pydantic import BaseModel, Field


class TokenUsage(BaseModel):
    completion_tokens: Annotated[
        int, Field(description='How many tokens were used in the response?', ge=0)
    ]
    prompt_tokens: Annotated[
        int, Field(description='How many tokens were used in the prompt?', ge=0)
    ]


class WorkStatus(str, Enum):
    ok = 'ok'
    incomplete = 'incomplete'
    failed = 'failed'


class ChatOutput(BaseModel):
    errors: Annotated[
        Optional[List[str]],
        Field(description='Any errors that occurred during processing.'),
    ] = None
    estimated_cost: Annotated[
        Optional[float], Field(description='How much money do we think we spent?')
    ] = None
    id: Annotated[Any, Field(description='The unique ID of the work item.')]
    response: Annotated[
        Optional[Any],
        Field(
            description='The response from the LLM. If this is present, the request succeeded.'
        ),
    ] = None
    status: Annotated[
        WorkStatus, Field(description='What is the status of this work item?')
    ]
    token_usage: Annotated[
        Optional[TokenUsage], Field(description='How many tokens did we use?')
    ] = None
