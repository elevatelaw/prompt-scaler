# generated by datamodel-codegen:
#   filename:  ChatPrompt.json
#   timestamp: 2025-08-25T16:54:52+00:00

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel


class ExternalSchema(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    path: Annotated[str, Field(description='The path to the schema.')]


class User(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    images: Annotated[
        Optional[List[str]],
        Field(description='Images to include with the user message, provided as URLs.'),
    ] = []
    text: Annotated[Optional[str], Field(description='Text provided by the user.')] = (
        None
    )


class Message1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    user: User


class Assistant(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    json_: Annotated[
        Any,
        Field(
            alias='json',
            description='The assistant response. This is always a JSON [`Value`].',
        ),
    ]


class Message2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    assistant: Assistant


class Message(RootModel[Union[Message1, Message2]]):
    root: Annotated[
        Union[Message1, Message2],
        Field(
            description='A message, and optionally a response (represented as a JSON object).\n\nWe would also have a `State: PromptState` field here, but that interacts badly with the [`Deserialize`] trait from [`serde`]. So just pretend that this type exists in two versions: one [`Template`] and one [`Rendered`].'
        ),
    ]


class ScalarType1(str, Enum):
    string = 'string'


class ScalarType2(str, Enum):
    number = 'number'


class ScalarType3(str, Enum):
    boolean = 'boolean'


class ScalarType(RootModel[Union[ScalarType1, ScalarType2, ScalarType3]]):
    root: Annotated[
        Union[ScalarType1, ScalarType2, ScalarType3],
        Field(description='Basic types we support.'),
    ]


class InternalSchema3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Annotated[str, Field(description='A description of this value.')]
    enum: Annotated[Optional[List], Field(description='Allowed enum values.')] = None
    type: Annotated[
        Optional[ScalarType], Field(description='The type of this scalar.')
    ] = None


class ChatPrompt(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    developer: Annotated[
        Optional[str],
        Field(description='The developer (aka "system") message, if any.'),
    ] = None
    messages: Annotated[List[Message], Field(description='Messages.')]
    response_schema: Annotated[Schema, Field(description='Our schema.')]


class InternalSchema1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Annotated[str, Field(description='A description of this value.')]
    items: Annotated[InternalSchema, Field(description='The items in the array.')]


class InternalSchema2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Annotated[str, Field(description='A description of this value.')]
    properties: Annotated[
        Dict[str, InternalSchema], Field(description='The properties of the object.')
    ]
    title: Annotated[Optional[str], Field(description='The title of this object.')] = (
        None
    )


class InternalSchema(
    RootModel[Union[InternalSchema1, InternalSchema2, InternalSchema3]]
):
    root: Annotated[
        Union[InternalSchema1, InternalSchema2, InternalSchema3],
        Field(description='A simplified version of JSON Schema, used for validation.'),
    ]


class Schema(RootModel[Union[InternalSchema, ExternalSchema]]):
    root: Annotated[
        Union[InternalSchema, ExternalSchema],
        Field(description='Either an external or an internal schema.'),
    ]


ChatPrompt.model_rebuild()
InternalSchema1.model_rebuild()
InternalSchema2.model_rebuild()
